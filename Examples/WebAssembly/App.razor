@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@using Nevron.Nov;
@using Nevron.Nov.WebAssembly;
@using Nevron.Nov.IO;
@using Nevron.Nov.Compiler;

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        // apply license
        NLicense license = new NLicense("3606dd94269800c6b08ee2430d3c1b16b280006acecd0bfe");
        NLicenseManager.Instance.SetLicense(license);

        // Install NOV
        NNovApplicationInstaller.Install(
            JSRuntime,
            NavigationManager.BaseUri,

            Nevron.Nov.Barcode.NBarcodeModule.Instance,
            Nevron.Nov.Text.NTextModule.Instance,
            Nevron.Nov.Diagram.NDiagramModule.Instance,
            Nevron.Nov.Chart.NChartModule.Instance,
            Nevron.Nov.Schedule.NScheduleModule.Instance,
            Nevron.Nov.Grid.NGridModule.Instance
        );

        // Optional: If you intend to use NCodeAssembly (for example for Family Tree Shapes in in NOV Diagram for .NET),
        // you need to specify the compiler service used to compile them.
        NApplication.CompilerService = new NRoslynCompilerService();

        // load resourse from embedded resource
        string resourceName = GetType().Namespace + ".Resources.Resources.zip";
        System.IO.Stream zipStream = GetType().Assembly.GetManifestResourceStream(resourceName);

        // install a resource folder with in-memory resources
        NFileSystem memoryFSS = NFileSystem.CreateMemoryFileSystem();
        memoryFSS.DecompressZip(zipStream, "/Resources/");
        NApplication.ResourcesFolder = new NFolder(memoryFSS, "/Resources/");
    }
}